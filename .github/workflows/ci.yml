name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint --if-present

    - name: Run tests
      run: npm test

    - name: Build project
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.node-version }}
        path: dist/

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.release.prerelease == false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci

    - name: Extract version from release tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Update package.json version
      run: npm version ${{ steps.get_version.outputs.VERSION }} --no-git-tag-version

    - name: Build project
      run: npm run build

    - name: Run pre-publish checks
      run: |
        echo "Verifying package contents..."
        npm pack --dry-run
        echo "Checking package.json version matches release tag..."
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        if [ "$PACKAGE_VERSION" != "${{ steps.get_version.outputs.VERSION }}" ]; then
          echo "Version mismatch: package.json=$PACKAGE_VERSION, tag=${{ steps.get_version.outputs.VERSION }}"
          exit 1
        fi

    - name: Publish to NPM
      run: |
        echo "Publishing roku-pkg-cli@${{ steps.get_version.outputs.VERSION }} to npm..."
        npm publish --access public
        echo "âœ… Successfully published to npm registry!"
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Create GitHub deployment
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: context.payload.deployment?.id || 0,
            state: 'success',
            environment: 'npm',
            description: 'Successfully published to npm registry'
          })

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level high

    - name: Check for vulnerabilities
      run: npm audit --audit-level moderate